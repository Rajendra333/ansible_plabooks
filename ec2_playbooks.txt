Playbook for creating aws_ec2 instances
------------------------------------------

  ---
  - hosts: localhost
    tasks:

      - name:setting up security/firewall group
        ec2_group:
           name: sample_aws_security_group
           description: rules allowing traffiice on port 22 and 80
           region: us-west-2
           rules:
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 22
              to_port:22
              cidr_ip: 0.0.0.0/0
           rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
         
      - name: provision a ec2 instance:
        ec2:
           key_name: id_rsa
           region: us-west-2
           instance_type: t2.micro
           image: ami-775e4f16
           wait: yes
           wait_timeout: 500
           count: 1
           instance_tags:
             Name: sampleec2
             Owner: ansadm
           monitoring: no
           vpc_subnet_id: subnet-920b30f6
           assign_public_ip: yes
           group: sample_aws_security-group
        register:ec2_out
  
       -name: wait for ssh to come up
        wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started

        with_items: '{{ec2_out.instances}}'    

-------------------------------------------------------------------------------
  ---
  - hosts: local host
  - name: create instance
    gather_facts: false
    vars:
      keypair: Id_rsa
      instance_type: t2.micro
      image: ami-0f65671a86f061fcd
      region: Ohio
    tasks:
      - name: launch instance
        ec2:
          key_name: "{{ keypair }}"
          group: default
          instance_type: "{{ instance_type }}"
          image: "{{ image }}"
          wait: true
          region: "{{ region }}"
          aws_access_key: AKIAIR42EAHNJ3QD6NPA
          aws_secret_key: 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
       register: ec2
     - name: print all ec2 variables
       debug: var=ec2

--------------------------------------------------------------------------

---
  - name: Provision an EC2 Instance
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      instance_type: t1.micro
      security_group: testserver # Change the security group name here
      image: ami-xxxxxxxx # Change the AMI, from which you want to launch the server
      region: us-east-1 # Change the Region
      keypair: ansible # Change the keypair name
      count: 1

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

      - name: Create a security group
        local_action: 
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          rules:
            - proto: tcp
              type: ssh
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              type: all
              cidr_ip: 0.0.0.0/0


      - name: Launch the new EC2 Instance
        local_action: ec2 
                      group={{ security_group }} 
                      instance_type={{ instance_type}} 
                      image={{ image }} 
                      wait=true 
                      region={{ region }} 
                      keypair={{ keypair }}
                      count={{count}}
        register: ec2

      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile 
                      dest="./hosts" 
                      regexp={{ item.public_ip }} 
                      insertafter="[webserver]" line={{ item.public_ip }}
        with_items: "{{ ec2.instances }}"


      - name: Wait for SSH to come up
        local_action: wait_for 
                      host={{ item.public_ip }} 
                      port=22 
                      state=started
        with_items: "{{ ec2.instances }}"

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ ec2.instances }}"
        args:
          tags:
            Name: webserver

-------------------------------------------------------------





























